-----Primer Video 1-----
Analizo ----> Resuelvo ----> Programo


----Segundo Video----- 

Cuadros de Diagrmas de flujo
Assignment= Declar varibles o abrir espacios en memoria, 
realiar operaciones arimeticas

Call=

Input= sirve para la Introuccion de datos del usuario
 desde el teclado

Output= sirve para mandar mensajes desde el programa

Selection= //condicionales: es una instruccion donde 
inidca el camino a eelgir

Loop= Ciclo o bucle: es una sentencia que se realiza repetidas veces
hasta que la condicion asignacion deje de cumplirse

// Varibles necesitan saber 
Numeros=0 y texto=""

// signos de contenacion
+ para unir


----Tercer Video-----
// uso de Selection
//condicionales: es una instruccion donde inidca el camino a eelgir

1. 2 + 2 = 4
2. 2 - 2 = 0
3. 2 * 2 = 4
4. 2 / 2 = 1

vamos :)

----Cuarto Video-----
// Loop
// Ciclo o bucle: es una sentencia que se realiza repetidas veces
hasta que la condicion asignacion deje de cumplirse

uso de var tipo texto con = ""
uso de var tipo numerico con = 0

Bucle --> proceso continuo

variable veces = que es cuntas veces se repita en pantalla

izquierda a derecha
variable contador = determina en que vuelta va para que puede ser 
igual a la variable veces, pero contador incia en 0

insturccion para contador = + 1, esto es conocido como acumuladores


----Quinto Video-----
//Series Numericas

a) 1, 2, 3, 4, 5, 6,...__,__,...
b) 1, 3, 5, 7, 9, 11,...__,__,...
c) 0, 1, 1, 2, 3, 5, 8,...__,__,...

resolver:
a) 1, 2, 3, 4, 5, 6,...7,8,...
b) 1, 3, 5, 7, 9, 11,...13,15,...
c) 0, 1, 1, 2, 3, 5, 8,...13_,21,...

== igual
!= diferente
< menor
> mayor
<= menor o igual
>= mayor o igual


-------------Sexto Video---------------

Sucesion de Fibonacci
c) 0, 1, 1, 2, 3, 5, 8,...13_,21,...
   a  b  c 
espacios 

funciona:
realia suma de susesor con antesesor
 0 + 1 = 1     1 + 1 = 2   1 + 2 = 3
 

representacion 0, 1:
0 = 0 + 1      1 = 0 + 1      
c = a + b      c = a + b      

1 = 0 + 1 se realiza el recorido de izquiera a derecha
c = a + b se realice un cambio borre lo de b y guarde la variable a en b seria a = b
y que borre la variable a y que guarde la variable c en a seria c = a
quedando asi

new1 = c1 + a0      
c = a + b  

quedando asi 0, 1, 1,
 
vuelvo a realizar otra vuelta donde a = b y a = c valores de 
izquierda a derecha
new2 = c1 + a1      
c = a + b  

quedando asi 0, 1, 1, 2

vuelvo a realizar otra vuelta donde a = b y a = c valores de 
izquierda a derecha
new3 = c2 + a1      
c = a + b  

quedando asi 0, 1, 1, 2, 3

vuelvo a realizar otra vuelta donde a = b y a = c valores de 
izquierda a derecha
new5 = c3 + a2      
c = a + b  

quedando asi 0, 1, 1, 2, 3, 5

----Opcion 2 del ejericio-----
a = 0
b = 1
c = 0

ejecuccion:

c = 0

0, 

V1-----
a <-- b
1

b <-- c
0     

c = a + b
1 = 1 + 0

0, 1,  

V3-----
a <-- b
0

b <-- c
1     

c = a + b
1 = 0 + 1

0, 1, 1  

V4-----
a <-- b
1

b <-- c
1     

c = a + b
2 = 1 + 1

0, 1, 1, 2  
  


-------------Septimo Video---------------
//Programacion Orientada a OBJETOS

calculacion de un triangulo de tereno
// se desea comprar este terreno y el precio es de 
2500 por metro cuadrado

            |  
            | altura (15)
            |
 ----------
 base (35)


 metros cuadrados ?

 mc = b * a //uso de 3 varibles 
 ? = 35 * 15  //objeto de metros cuadros
 525 metros cuadrados

 mc * 2500 (precio de metro cuadrado) // objeto precio de metro

 525 *2500 

 //1,312.500 es el total a pagar 

 

-------------Octavo Video---------------
 //Operadores relacionales

Operador    Nombre      	    Ejemplo      Significado
   <	   Menor que    	       A < B      A es menor que B
   >	   Mayor que     	       A > B      A es Mayor que B
  ==	   Igual a       	       A == B     A es igual a B
  !=	   Diferente     	       A != B     A es diferente de B
  <=	   Menor que o igual a   A <= B     A es menor que o igual a B
  >=	   Mayor que o igual a   A >= B     A es mayor que o igual a B

 //Operadores Lógicos

- && AND (el resultado es verdadero si ambas expresiones son verdaderas).
- ||OR (el resultado es verdadero si alguna expresión es verdadera).
- ! NOT (el resultado invierte la condición de la expresión).

Ejemplos:
Ejemplo AND: -¿Puedo ir a la fiesta?
	    -Si sacas la basura "y" haces tú tarea puedes ir.

Ejemplo OR: -¿Puedo ir a la fiesta?
	    -Si sacas la basura "o" haces tú tarea puedes ir.

Ejemplo NOT: -¿Puedo ir a la fiesta?
	     -SI, puedes ir (No, no puedes ir)
	     - No, puedes ir (Si, si puedes ir)


Ejercicio 1: Cálculo de perímetro de figuras
Realizar un programa que:

No finalice hasta que el usuario indique que desea salir.

Permita calcular el perímetro de un rectángulo y de un triángulo.

Para el rectángulo, se ingresa la base y la altura, y se calcula el perímetro con la fórmula:
Perímetro = 2 * (base + altura)

Para el triángulo, se ingresan las tres longitudes de sus lados y se calcula el perímetro sumándolos.



-------------Noveno Video---------------
//Vectores o arreglos
  - Modificar
  - Consultar
  - Eliminar
  - Insertar

//Arreglos unidimensionales (posiciones)--solo se mueve de adelante asi atras
 0 1 2 3 4 5 6 7 8 9 
 _ _ _ _ _ _ _ _ _ _
      /|\
atras  |   adelante
       |

//Arreglos bIdimensionales  (posiciones)-- parecido a las matrices
// se mueve adelnate y atras y tambien arriba y abajo

             |  
      atras  |  adelante
            \|/
     0   1   2   3   4   5 
arr 
iba  1   2   3   4   5   6

---> 2   3   4   5   6   7

aba  3   4   5   6   7   8
jo
     5   6   7   8   9   10
         

-------------Decimo Video---------------
Tipos de comportamiento en arreglos unidimensionales

1. Arreglos estaticos -- movimiento manual
      Nombres y edades 


2. Arreglos dinamicos -- movimiento automatico




-------------Decimoprimero Video---------------
//Arreglos bIdimensionales 
Crear un arreglo bidimensional con Filas y Columnas que el usuario indique
 y llenarlo de números consecutivos empezando desde 1.

Ejemplo con 3 filas y 4 columnas:

1   2   3    4 
5   6   7    8
9   10  11   12

definicio clara en la desicion


-------------Decimosegundo Video---------------
// Algoritmos de Ordenamiento

- Bubble Sort
- Insertion Sort
- Shell Sort
- Merge Sort
- Quick Sort

- Bubble Sort
// Reglas:
// 1. deben de ir al final y regresar si tiene 5 posiciones
// se debe de cubrir 5 vueltas y si tiene 10p se dan 10 vueltas
// 2. (a1 < a2 = cambio de apuntadores a la derecha )
// se debe de cumplir el intercabio del apuntador 1 es menor 
// al apuntador se cambian o corren 1 posicion ambos apuntadores a 
// la derecha 
// 3.  No se puede peder de vista los numeros por eso se usa un auxiliar

// Apuntador 1= a1  &&  Apuntador 2= a3
 1   2   3   4   5            auxiliar
 5   10  2   12  1            ______
/ \ / \
 |   |
 |   |
a1 a2

vuelta 1
 1   2   3   4   5            auxiliar
 5   2   10   1  12            _1_____
             / \  / \
              |    |
              |    |
              a1   a2


vuelta 2
 1   2   3   4   5            auxiliar
 2   5   1  10   12            ___1___
/ \ / \
 |   |     // como 10 > 12 se corren los apuntadores
 |   |     // pero como no existe posicion 6 se reinicia
 a1 a2


vuelta 3
 1   2   3   4   5            auxiliar
 2   1   5  10   12            ___1___
/ \ / \
 |   |     // 10 > 12 = reinicio de a1 y a2
 |   |     
 a1 a2


vuelta 4
 1   2   3   4   5            auxiliar
 1   2   5  10   12            ___1___
/ \ / \
 |   |     // 10 > 12 = reinicio de a1 y a2
 |   |     
 a1 a2


vuelta 5
 1   2   3   4   5            auxiliar
 1   2   5  10   12            ___1___
            / \ / \
             |   |     
             |   |     
             a1  a2

definicion de 5 varibles 
una etrada
otra variable
lopp

vamos ---------x1
vamos ---------x1
vamos ---------x1





























 


 
































































































































